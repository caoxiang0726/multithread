package com.cx.juclock.fairlock;

/**
 *
 * 释放锁时，主要进行的操作:
 * 是更新当前线程对应的锁的状态。
 * 如果当前线程对锁已经彻底释放，则设置“锁”的持有线程为null，设置当前线程的状态为空，然后唤醒后继线程。
 *
 *
 *
 * 总结
 公平锁和非公平锁的区别，是在获取锁的机制上的区别。表现在，在尝试获取锁时 ——
   公平锁，只有在当前线程是CLH等待队列的表头时，才获取锁；
    而非公平锁，只要当前锁处于空闲状态，则直接获取锁，而不管CLH等待队列中的顺序。
 只有当非公平锁尝试获取锁失败的时候，它才会像公平锁一样，进入CLH等待队列排序等待。
 */
public class UnLockMethod {
}
